(this.webpackJsonp=this.webpackJsonp||[]).push([["nets-checkout"],{"7ReL":function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","general":{"mainMenuItemGeneral":"Nets","descriptionTextModule":"Einstellungen für Nets"},"capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"Nets"}}}')},L21L:function(e,t,n){"use strict";n.r(t);const s=Shopware.Classes.ApiService;var r=class extends s{constructor(e,t,n="nets"){super(e,t,n)}captureTransaction(e,t,n){return this.httpClient.post("/nets/transaction/charge",{params:{orderId:e,paymentId:t,amount:n}},{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}refundTransaction(e,t,n){return this.httpClient.post("/nets/transaction/refund",{params:{orderId:e,paymentId:t,amount:n}},{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}getSummaryAmounts(e){const t=e.transactions.first();return this.httpClient.post("/nets/transaction/summary",{params:{transaction:t}},{headers:this.getBasicHeaders()}).then(e=>s.handleResponse(e))}};const{Application:i}=Shopware;i.addServiceProvider("NetsCheckoutApiPaymentService",e=>{const t=i.getContainer("init");return new r(t.httpClient,e.loginService)});var a=n("X8De"),o=n.n(a);const{Component:c,Mixin:u}=Shopware;Shopware.Component.override("sw-order-user-card",{template:o.a,inject:["NetsCheckoutApiPaymentService"],mixins:[u.getByName("notification"),u.getByName("sw-inline-snippet")],data:()=>({isLoading:!0,amountAvailableForCapturing:0,amountAvailableForRefunding:0,captureButtonLoading:!1,refundButtonLoading:!1,orderState:null}),beforeMount(){this.getSummaryAmounts()},props:["currentOrder"],methods:{getTransactionId(e){const t=e.transactions.first();let n=null;return t.hasOwnProperty("customFields")&&t.customFields&&t.customFields.hasOwnProperty("nets_easy_payment_details")&&t.customFields.nets_easy_payment_details&&(n=t.customFields.nets_easy_payment_details.transaction_id),n},canCapture(){return this.amountAvailableForCapturing>0&&"open"==this.orderState},getSummaryAmounts(){let e;e=this,e.isLoading=!0,this.getTransactionId(this.currentOrder)&&this.NetsCheckoutApiPaymentService.getSummaryAmounts(this.currentOrder).then(t=>{e.amountAvailableForCapturing=t.amountAvailableForCapturing,e.amountAvailableForRefunding=t.amountAvailableForRefunding,e.isLoading=!1,e.orderState=t.orderState}).catch(t=>{e.isLoading=!1})},canRefund(){return this.amountAvailableForRefunding>0&&"paid"==this.orderState||"paid_partially"==this.orderState||"pay_partially"==this.orderState},capture(e){let t=this;const n=this.currentOrder.id,s=this.amountAvailableForCapturing;t.isLoading=!0,this.NetsCheckoutApiPaymentService.captureTransaction(n,e,s).then(e=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Capture processed successfully.")}),t.isLoading=!1,this.getSummaryAmounts()}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc(e.message)}),t.isLoading=!1,this.getSummaryAmounts()})},refund(e){let t=this;t.isLoading=!0;const n=this.currentOrder.id,s=this.amountAvailableForRefunding;this.NetsCheckoutApiPaymentService.refundTransaction(n,e,s).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Refund processed successfully.")}),t.isLoading=!1,this.getSummaryAmounts()}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during refund")}),t.isLoading=!1,this.getSummaryAmounts()})}}});var d=n("7ReL"),l=n("P8pj");const{Module:p}=Shopware;p.register("nets-checkout",{type:"plugin",name:"NetsCheckout",title:"nets-checkout.general.mainMenuItemGeneral",description:"nets-checkout.general.descriptionTextModule",version:"1.1.0",targetVersion:"1.1.0",icon:"default-action-settings",snippets:{"de-DE":d,"en-GB":l}})},P8pj:function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture processed successfully.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund processed successfully.","errorTitle":"Nets"}}}')},X8De:function(e,t){e.exports='{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\n        <div v-if="getTransactionId(currentOrder) != null">\n            <dt>{{ $tc(\'nets-checkout.payment-id\') }}</dt>\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\n        </div>\n    {% endblock %}\n\n    <template v-if="getTransactionId(currentOrder) != null">\n        <div v-if="canCapture()">\n            {{ $tc(\'nets-checkout.api-actions\') }}\n        </div>\n\n        <div class="capture-controls" v-if="canCapture()">\n            <sw-number-field numberType="float" :step="null" :min="null" :max="null"  v-model="amountAvailableForCapturing" :digits="2" :allowEmpty="false">\n            </sw-number-field>\n            <sw-button-process @click="capture(getTransactionId(currentOrder))" :isLoading="captureButtonLoading">\n                {{ $tc(\'nets-checkout.capture.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n\n        <div class="refund-controls" v-if="canRefund()">\n            <sw-number-field numberType="float" :step="null" :min="null" :max="null"  v-model="amountAvailableForRefunding" :digits="2" :allowEmpty="false">\n            </sw-number-field>\n            <sw-button-process @click="refund(getTransactionId(currentOrder))" :isLoading="refundButtonLoading">\n                {{ $tc(\'nets-checkout.refund.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n    </template>\n\n{% endblock %}\n'}},[["L21L","runtime"]]]);