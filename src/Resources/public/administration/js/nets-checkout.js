(this.webpackJsonp=this.webpackJsonp||[]).push([["nets-checkout"],{IovY:function(t){t.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","general":{"mainMenuItemGeneral":"Nets","descriptionTextModule":"Einstellungen für Nets"},"capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"Nets"}}}')},JbEq:function(t,e,n){"use strict";n.r(e);const s=Shopware.Classes.ApiService;var r=class extends s{constructor(t,e,n="nets"){super(t,e,n)}captureTransaction(t,e,n){return this.httpClient.post("/nets/transaction/charge",{params:{orderId:t,paymentId:e,amount:n}},{headers:this.getBasicHeaders()}).then(t=>s.handleResponse(t))}refundTransaction(t,e,n){return this.httpClient.post("/nets/transaction/refund",{params:{orderId:t,paymentId:e,amount:n}},{headers:this.getBasicHeaders()}).then(t=>s.handleResponse(t))}getSummaryAmounts(t){const e=t.transactions.first();return this.httpClient.post("/nets/transaction/summary",{params:{transaction:e}},{headers:this.getBasicHeaders()}).then(t=>s.handleResponse(t))}};const{Application:i}=Shopware;i.addServiceProvider("NetsCheckoutApiPaymentService",t=>{const e=i.getContainer("init");return new r(e.httpClient,t.loginService)});var a=n("eeL/"),o=n.n(a);const{Component:c,Mixin:u}=Shopware;Shopware.Component.override("sw-order-user-card",{template:o.a,inject:["NetsCheckoutApiPaymentService"],mixins:[u.getByName("notification"),u.getByName("sw-inline-snippet")],data:()=>({isLoading:!0,amountAvailableForCapturing:0,amountAvailableForRefunding:0,captureButtonLoading:!1,refundButtonLoading:!1,orderState:null}),beforeMount(){this.getSummaryAmounts()},props:["currentOrder"],methods:{getTransactionId(t){const e=t.transactions.first();let n=null;return e.hasOwnProperty("customFields")&&e.customFields&&e.customFields.hasOwnProperty("nets_easy_payment_details")&&e.customFields.nets_easy_payment_details&&(n=e.customFields.nets_easy_payment_details.transaction_id),n},canCapture(){return this.amountAvailableForCapturing>0&&"open"==this.orderState},getSummaryAmounts(){let t;t=this,t.isLoading=!0,this.getTransactionId(this.currentOrder)&&this.NetsCheckoutApiPaymentService.getSummaryAmounts(this.currentOrder).then(e=>{t.amountAvailableForCapturing=e.amountAvailableForCapturing,t.amountAvailableForRefunding=e.amountAvailableForRefunding,t.isLoading=!1,t.orderState=e.orderState}).catch(e=>{t.isLoading=!1})},canRefund(){return this.amountAvailableForRefunding>0&&"paid"==this.orderState||"paid_partially"==this.orderState||"pay_partially"==this.orderState},capture(t){let e=this;const n=this.currentOrder.id,s=this.amountAvailableForCapturing;e.isLoading=!0,this.NetsCheckoutApiPaymentService.captureTransaction(n,t,s).then(t=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Capture processed successfully.")}),e.isLoading=!1,this.getSummaryAmounts()}).catch(t=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc(t.message)}),e.isLoading=!1,this.getSummaryAmounts()})},refund(t){let e=this;e.isLoading=!0;const n=this.currentOrder.id,s=this.amountAvailableForRefunding;this.NetsCheckoutApiPaymentService.refundTransaction(n,t,s).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Refund processed successfully.")}),e.isLoading=!1,this.getSummaryAmounts()}).catch(t=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during refund")}),e.isLoading=!1,this.getSummaryAmounts()})}}});var d=n("IovY"),l=n("j3Og");const{Module:p}=Shopware;p.register("nets-checkout",{type:"plugin",name:"NetsCheckout",title:"nets-checkout.general.mainMenuItemGeneral",description:"nets-checkout.general.descriptionTextModule",version:"1.1.2",targetVersion:"1.1.2",icon:"default-action-settings",snippets:{"de-DE":d,"en-GB":l}})},"eeL/":function(t,e){t.exports='{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\n        <div v-if="getTransactionId(currentOrder) != null">\n            <dt>{{ $tc(\'nets-checkout.payment-id\') }}</dt>\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\n        </div>\n    {% endblock %}\n\n    <template v-if="getTransactionId(currentOrder) != null">\n        <dt v-if="canCapture()">\n            {{ $tc(\'nets-checkout.api-actions\') }}\n        </dt>\n\n        <div class="capture-controls" v-if="canCapture()">\n            <sw-button-process @click="capture(getTransactionId(currentOrder))" :isLoading="captureButtonLoading">\n                {{ $tc(\'nets-checkout.capture.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n\n        <div class="refund-controls" v-if="canRefund()">\n            <sw-button-process @click="refund(getTransactionId(currentOrder))" :isLoading="refundButtonLoading">\n                {{ $tc(\'nets-checkout.refund.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n    </template>\n\n{% endblock %}\n'},j3Og:function(t){t.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture processed successfully.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund processed successfully.","errorTitle":"Nets"}}}')}},[["JbEq","runtime"]]]);