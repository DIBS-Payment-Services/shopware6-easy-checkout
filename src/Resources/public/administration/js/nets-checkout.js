(this.webpackJsonp=this.webpackJsonp||[]).push([["nets-checkout"],{L21L:function(e,t,s){"use strict";s.r(t);const n=Shopware.Classes.ApiService;var r=class extends n{constructor(e,t,s="nets"){super(e,t,s)}captureTransaction(e){const t=e.transactions.first(),s=e.id;return this.httpClient.post("/nets/transaction/charge",{params:{transaction:t,orderId:s}},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}refundTransaction(e){const t=e.transactions.first(),s=e.id;return this.httpClient.post("/nets/transaction/refund",{params:{transaction:t,orderId:s}},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}getSummaryAmounts(e){const t=e.transactions.first();return this.httpClient.post("/nets/transaction/summary",{params:{transaction:t}},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}};const{Application:i}=Shopware;i.addServiceProvider("NetsCheckoutApiPaymentService",e=>{const t=i.getContainer("init");return new r(t.httpClient,e.loginService)});var a=s("X8De"),o=s.n(a);const{Component:c,Mixin:u}=Shopware;Shopware.Component.override("sw-order-user-card",{template:o.a,inject:["NetsCheckoutApiPaymentService"],mixins:[u.getByName("notification"),u.getByName("sw-inline-snippet")],data:()=>({disableCaptureButton:!1,disableRefundButton:!0,isLoading:!0,amountToBeCaptured:-1,amountToBeRefunded:0}),beforeMount(){this.getSummaryAmounts()},props:["currentOrder"],methods:{captureOrder(e){let t=this;t.disableCaptureButton=!0,t.isLoading=!0,this.NetsCheckoutApiPaymentService.captureTransaction(e).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Capture processed successfully.")}),t.disableCaptureButton=!0,t.disableRefundButton=!1,t.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during capture.")}),t.disableCaptureButton=!1,t.isLoading=!1})},refundOrder(e){let t=this;t.disableRefundButton=!0,t.isLoading=!0,this.NetsCheckoutApiPaymentService.refundTransaction(e).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Refund processed successfully.")}),t.disableRefundButton=!0,t.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during refund")}),t.disableRefundButton=!1,t.isLoading=!1})},getTransactionId(e){var t=e.transactions.first(),s=!1;return t.hasOwnProperty("customFields")&&t.customFields&&t.customFields.hasOwnProperty("nets_easy_payment_details")&&t.customFields.nets_easy_payment_details&&(s=t.customFields.nets_easy_payment_details.transaction_id),s},canCapture(e){return 1!=this.disableCaptureButton&&e.transactions.first().customFields.nets_easy_payment_details.can_capture},getSummaryAmounts(){this.getTransactionId(this.currentOrder)&&this.NetsCheckoutApiPaymentService.getSummaryAmounts(this.currentOrder).then(e=>{this.amountToBeCaptured=e.amountToBeCaptured,this.amountToBeRefunded=e.amountToBeRefunded}).catch(e=>{})},canRefund(e){return 0==this.disableRefundButton||1!=this.disableRefundButton&&e.transactions.first().customFields.nets_easy_payment_details.can_refund}},capture(){let e=this;e.disableCaptureButton=!0,e.isLoading=!0;var t=this.currentOrder;t.amountToCapture=this.amountToCapture,t.itemsToCapture=this.authorizedItems,this.NetsCheckoutApiPaymentService.captureTransaction(t).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Capture processed successfully.")}),e.disableCaptureButton=!0,e.disableRefundButton=!1,e.isLoading=!1,this.getSummaryAmount()}).catch(t=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during capture.")}),e.disableCaptureButton=!1,e.isLoading=!1,this.getSummaryAmount()})}});var d=s("rLKv"),p=s("VwyM");const{Module:l}=Shopware;l.register("nets-checkout",{type:"plugin",name:"NetsCheckout",title:"nets-checkout.general.mainMenuItemGeneral",description:"nets-checkout.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"default-action-settings",snippets:{"de-DE":d,"en-GB":p}})},VwyM:function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture processed successfully.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund processed successfully.","errorTitle":"Nets"}}}')},X8De:function(e,t){e.exports='{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\n        <div v-if="getTransactionId(currentOrder) != false">\n            <dt>{{ \'Nets Transaction id:\' }}</dt>\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\n            <dt>{{ \'Transaction Actions:\' }}</dt>\n        </div>\n    {% endblock %}\n\n    <template v-if="getTransactionId(currentOrder) != false">\n        <div class="capture-controls" v-if="amountToBeCaptured > 0">\n            <input type="text" v-model="amountToBeCaptured">\n\n\n            <sw-button-process @click="capture()" :disabled="false">\n                Capture\n            </sw-button-process>\n        </div>\n\n    </template>\n{% endblock %}\n'},rLKv:function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","general":{"mainMenuItemGeneral":"Nets","descriptionTextModule":"Einstellungen für Nets"},"capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"Nets"}}}')}},[["L21L","runtime"]]]);